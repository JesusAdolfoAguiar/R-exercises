View(iris)
mean(iris$Sepal.Length[iris$Species==virginica])
mean(iris$Sepal.Length[iris$Species==virginica])
mean(iris$Sepal.Length[iris$Species == virginica])
aggregate(iris$Sepal.Length,list(iris$Species),mean)
rowMeans(iris[,1:4])
colMeans(iris)
apply(iris[,1:4],1,mean)
apply(iris,1,mean)
apply(iris[,1:4],2,mean)
View(iris)
library(datasets)
data(mtcars)
mtcars
View(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
debug(ls)
debug(1s)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(x)
head()
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = FALASE)
sample(1:6, 4, replace = FALSE)
sample(1:20,10)
LETTERS
sample(letters)
sample(LETTERS)
flips <
s
flips <- prob=c(0.3,0.7)
flips <- sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips$1)
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
info()
nxt()
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
flips2
sum(flips2)
rnorm
?rnom
?rnorm
rnorm(10)
rnorm(10,25)
rnorm(100,25)
rnorm(10,mean=100,sd=25)
rpois(5,mean=10)
?rpois
rpois(5,10)
myreplicate(100,rpois(5,10))
my_pois <- myreplicate(100,rpois(5,10))
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
getwd()
source(pollutantmean.R)
getwd()
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:10) {
filenames <- sprintf("%03d.csv", id)
filenames <- paste(directory, filenames, sep="/")
ldf <- lapply(filenames, read.csv)
df=ldply(ldf)
# df is your list of data.frames
mean(df[, pollutant], na.rm = TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:10) {
filenames <- sprintf("%03d.csv", id)
filenames <- paste(directory, filenames, sep="/")
ldf <- lapply(filenames, read.csv)
df <- ldply(ldf)
# df is your list of data.frames
mean(df[, pollutant], na.rm = TRUE)
}
pollutantmean <- function(directory, pollutant, id = 1:10) {
filenames <- sprintf("%03d.csv", id)
filenames <- paste(directory, filenames, sep="/")
ldf <- lapply(filenames, read.csv)
df <- ldply(ldf)
# df is your list of data.frames
mean(df[, pollutant], na.rm = TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
files <- list.files(pattern = ".csv") ## creates a vector with all file names in your folder
polmean <- rep(0,length(files))
for(i in 1:length(files)){
data <- read.csv(files[i],header=T)
polmean[i] <- mean(data$pollutant)
}
result <- cbind(files,polmean)
write.csv(result,"result_polmeans.csv")
files <- list.files(pattern = ".csv") ## creates a vector with all file names in your folder
polmean <- rep(0,length(files))
for(i in 1:length(files)){
data <- read.csv(files[i],header=T)
polmean[i] <- mean(data$pollutant)
}
result <- cbind(files,polmean)
write.csv(result,"result_polmeans.csv")
NB-20-Y-B_2007_100cc_L5-7_DT155V1.1.PNG
files <- list.files(pattern = ".csv") ## creates a vector with all file names in your folder
polmean <- rep(0,length(files))
for(i in 1:length(files)){
data <- read.csv(files[i],header=T)
polmean[i] <- mean(data$pollutant)
}
result <- cbind(files,polmean)
write.csv(result,"result_polmeans.csv")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
#pollutantmean <- function(directory, pollutant, id = 1:10) {
#filenames <- sprintf("%03d.csv", id)
#filenames <- paste(directory, filenames, sep="/")
#ldf <- lapply(filenames, read.csv)
#df <- ldply(ldf)
# df is your list of data.frames
#mean(df[, pollutant], na.rm = TRUE)
#}
files <- list.files(pattern = ".csv") ## creates a vector with all file names in your folder
polmean <- rep(0,length(files))
for(i in 1:length(files)){
data <- read.csv(files[i],header=T)
polmean[i] <- mean(data$pollutant)
}
result <- cbind(files,polmean)
write.csv(result,"result_polmeans.csv")
#pollutantmean <- function(directory, pollutant, id = 1:10) {
#filenames <- sprintf("%03d.csv", id)
#filenames <- paste(directory, filenames, sep="/")
#ldf <- lapply(filenames, read.csv)
#df <- ldply(ldf)
# df is your list of data.frames
mean(df[, pollutant], na.rm = TRUE)
}
#pollutantmean <- function(directory, pollutant, id = 1:10) {
#filenames <- sprintf("%03d.csv", id)
#filenames <- paste(directory, filenames, sep="/")
#ldf <- lapply(filenames, read.csv)
#df <- ldply(ldf)
# df is your list of data.frames
mean(df[, pollutant], na.rm = TRUE)
}
#pollutantmean <- function(directory, pollutant, id = 1:10) {
#filenames <- sprintf("%03d.csv", id)
#filenames <- paste(directory, filenames, sep="/")
#ldf <- lapply(filenames, read.csv)
#df <- ldply(ldf)
# df is your list of data.frames
mean(df[, pollutant], na.rm = TRUE)
}
#pollutantmean <- function(directory, pollutant, id = 1:10) {
#filenames <- sprintf("%03d.csv", id)
#filenames <- paste(directory, filenames, sep="/")
#ldf <- lapply(filenames, read.csv)
#df <- ldply(ldf)
# df is your list of data.frames
mean(df[, pollutant], na.rm = TRUE)
}
#pollutantmean <- function(directory, pollutant, id = 1:10) {
#filenames <- sprintf("%03d.csv", id)
#filenames <- paste(directory, filenames, sep="/")
#ldf <- lapply(filenames, read.csv)
#df <- ldply(ldf)
# df is your list of data.frames
mean(df[, pollutant], na.rm = TRUE)
}
pollutantmean <- function(directory, pollutant, id = 1:10) {
filenames <- sprintf("%03d.csv", id)
filenames <- paste(directory, filenames, sep="/")
ldf <- lapply(filenames, read.csv)
df=ldply(ldf)
# df is your list of data.frames
mean(df[, pollutant], na.rm = TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
install.packages(plyr)
install.packages("plyr")
pollutantmean("specdata", "sulfate", 1:10)
getwd()
pollutantmean <- function(directory, pollutant, id = 1:332) {
#set the path
path = directory
#get the file List in that directory
fileList = list.files(path)
#extract the file names and store as numeric for comparison
file.names = as.numeric(sub("\\.csv$","",fileList))
#select files to be imported based on the user input or default
selected.files = fileList[match(id,file.names)]
#import data
Data = lapply(file.path(path,selected.files),read.csv)
#convert into data frame
Data = do.call(rbind.data.frame,Data)
#calculate mean
mean(Data[,pollutant],na.rm=TRUE)
}
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
getwd()
pollutantmean <- function(directory, pollutant, id = 1:332) {
#set the path
path = directory
#get the file List in that directory
fileList = list.files(path)
#extract the file names and store as numeric for comparison
file.names = as.numeric(sub("\\.csv$","",fileList))
#select files to be imported based on the user input or default
selected.files = fileList[match(id,file.names)]
#import data
Data = lapply(file.path(path,selected.files),read.csv)
#convert into data frame
Data = do.call(rbind.data.frame,Data)
#calculate mean
mean(Data[,pollutant],na.rm=TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
complete <- function(directory, id = 1:332) {
count_complete <- function(fname) sum(complete.cases(read.csv(fname)))
fnames <- list.files(directory, full.names=TRUE)[id]
data.frame(id = id, complete = unlist(lapply(fnames, count_complete)))
}
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
corr.file <- function(filename) {
data <- read.csv(paste(directory, "/", i, sep =""))
x <- complete.cases(data)
sulfate <- data[,2]
nitrate <- data[,3]
b <- cor(sulfate,nitrate)
if (j>threshold) return(b) else return(numeric())
}
a <- list.files("specdata")
correlations <- sapply(a, corr.file)
this is the correct and running solution you can refer to this
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating the location of
## the CSV files
## 'threshold' is a numeric vector of length 1 indicating the number of
## completely observed observations (on all variables) required to compute
## the correlation between nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
df = complete(directory)
ids = df[df["nobs"] > threshold, ]$id
corrr = numeric()
for (i in ids) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
dff = newRead[complete.cases(newRead), ]
corrr = c(corrr, cor(dff$sulfate, dff$nitrate))
}
return(corrr)
}
complete <- function(directory, id = 1:332) {
f <- function(i) {
data = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
sum(complete.cases(data))
}
nobs = sapply(id, f)
return(data.frame(id, nobs))
}
cr <- corr("specdata", 150)
head(cr)
#this is the correct and running solution you can refer to this
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating the location of
## the CSV files
## 'threshold' is a numeric vector of length 1 indicating the number of
## completely observed observations (on all variables) required to compute
## the correlation between nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
df = complete(directory)
ids = df[df["nobs"] > threshold, ]$id
corrr = numeric()
for (i in ids) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
dff = newRead[complete.cases(newRead), ]
corrr = c(corrr, cor(dff$sulfate, dff$nitrate))
}
return(corrr)
}
complete <- function(directory, id = 1:332) {
f <- function(i) {
data = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
sum(complete.cases(data))
}
nobs = sapply(id, f)
return(data.frame(id, nobs))
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
pollutantmean <- function(directory, pollutant, id = 1:332) {
#set the path
path = directory
#get the file List in that directory
fileList = list.files(path)
#extract the file names and store as numeric for comparison
file.names = as.numeric(sub("\\.csv$","",fileList))
#select files to be imported based on the user input or default
selected.files = fileList[match(id,file.names)]
#import data
Data = lapply(file.path(path,selected.files),read.csv)
#convert into data frame
Data = do.call(rbind.data.frame,Data)
#calculate mean
mean(Data[,pollutant],na.rm=TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
complete <- function(directory, id = 1:332) {
count_complete <- function(fname) sum(complete.cases(read.csv(fname)))
fnames <- list.files(directory, full.names=TRUE)[id]
data.frame(id = id, complete = unlist(lapply(fnames, count_complete)))
}
complete <- function(directory, id = 1:332) {
count_complete <- function(fname) sum(complete.cases(read.csv(fname)))
fnames <- list.files(directory, full.names=TRUE)[id]
data.frame(id = id, complete = unlist(lapply(fnames, count_complete)))
}
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
complete <- function(directory, id = 1:332) {
count_complete <- function(fname) sum(complete.cases(read.csv(fname)))
fnames <- list.files(directory, full.names=TRUE)[id]
data.frame(id = id, complete = unlist(lapply(fnames, count_complete)))
}
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
complete <- function(directory, id = 1:332) {
count_complete <- function(fname) sum(complete.cases(read.csv(fname)))
fnames <- list.files(directory, full.names=TRUE)[id]
data.frame(id = id, complete = unlist(lapply(fnames, count_complete)))
}
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
#this is the correct and running solution you can refer to this
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating the location of
## the CSV files
## 'threshold' is a numeric vector of length 1 indicating the number of
## completely observed observations (on all variables) required to compute
## the correlation between nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
df = complete(directory)
ids = df[df["nobs"] > threshold, ]$id
corrr = numeric()
for (i in ids) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
dff = newRead[complete.cases(newRead), ]
corrr = c(corrr, cor(dff$sulfate, dff$nitrate))
}
return(corrr)
}
complete <- function(directory, id = 1:332) {
f <- function(i) {
data = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
sum(complete.cases(data))
}
nobs = sapply(id, f)
return(data.frame(id, nobs))
}
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
getwd()
gitclone()
cd C:Users/User15/.git/
~
cd
d
cd ``
cd ~
C:Users/User15/.git/
get wd()
#Matrix inversion is usually a costly computation
#and there may be some benefit to caching the inverse
#of a matrix rather than compute it repeatedly
#(there are also alternatives to matrix inversion that
#we will not discuss here). Your assignment is to write
#a pair of functions that cache the inverse of a matrix.
## makeCacheMatrix: This function creates a special “matrix” object that can cache its inverse. cacheSolve: This function computes the inverse of the special “matrix” returned by makeCacheMatrix above. If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache. Computing the inverse of a square matrix can be done with the solve function in R. For example, if X is a square invertible matrix, then solve(X) returns its inverse.
#For this assignment, assume that the matrix supplied is always invertible.
#The following functions are used to create a special object that stores a matrix and caches its inverse. The first function, makeCacheMatrix creates a special “matrix”, which is really a list containing a function to:
#set the value of the matrix
#get the value of the matrix
#set the value of the inverse
#get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
z <- NULL
set <- function(y) {
x <<- y
z <<- NULL
}
get <- function() x
setinverse <- function(inverse) z <<- inverse
getinverse <- function() z
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special
#“matrix” returned by makeCacheMatrix above.
#If the inverse has already been calculated
#(and the matrix has not changed), then cacheSolve
#should retrieve the inverse from the cache.
#Write a short comment describing this function
cacheSolve <- function(x, ...) {
z <- x$getinverse()
if(!is.null(z)) {
message("getting cached data")
return(z)
}
data <- x$get()
z <- solve(data, ...)
x$setinverse(z)
z
}
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
cacheSolve(B1)
