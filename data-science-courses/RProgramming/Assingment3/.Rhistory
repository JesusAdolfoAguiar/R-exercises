installed.packages("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
getwd()
getwd()
x <- 1
print(x)
x
msg <- "hello"
x <- ##Incomplete expression
s
x <- 5
x
print(x)
x < 1:20
x
x <- 1:20
clear
r
q
sadas
asd
as
das
d
1
1L
x <- c(0.5, 0.6)
x <- c(TRUE, FALSE)
x <- c(T, F)
x <- c("a", "b", "c")
x <- 9:29
x <- e(1+0i, 2+4i)
x <- c(1+0i, 2+4i)
y <- c(1.7, "A")
y <- c(T, 2)
y <- c("A", T)
x <- 0:6
class (x)
as.numeric(x)
as.logical(x)
as.character(x)
y <- c("a", "b", "c")
x <- list(1, "a", 1 + 4i)
x
x <- list(1, T, "a", 1 + 4i)
x
m <- matrix(nrow =2, ncol = 3)
m
dim(b)
dim(m)
attributes(m)
m <- matrix(1:6, nrow =2, ncol = 3)
m
m <- 1:10
m
dim(m) <- c(2, 5)
m <- 1:3
y <- 10:12
cbind(x, y)
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
table(x)
x
unclass(x)
x <- factor(c("yes", "yes", "no", "yes", "no"))
x <- factor(c("yes", "yes", "no", "yes", "no")), levels = c("yes", "no")
x
x <- c(1, 2, NA, 3)
is.na(x)
is.nn(x)
is.nan(x)
x <- c(1, 2, NaN, NA, 3)
is.na(x)
is.nan(x)
x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
x
nrow()
nrow(x)
ncol(x)
x <- 1:3
names(x)
names(x) <- c("foo", "bar", "norf")
x
names(x)
m <- matrix(1:4, nrow = 2, ncol = 2)
dimnames(m) <- list(c("a", "b"), c("c", "d"))
m
Y <- data.frame(a=1, b="a")
dput(y)
x <- "foo"
y <- data.frame(a=1, b="a")
dump(c("x", "y"), file = "data.R")
rm(x, y)
source("data.R")
y
x
con <- file("foo.txt", "r")
data <- read.csv(con)
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install.packages("swirl")
install.packages("swirl")
installed.packages("swirl")
library(swirl)
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
get(wd)
getwd()
CD:
cd Downloads
x <- c("a", "b", "c"
CLEAR
clear
getwd()
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
View(hw1_data)
getwd()
any(is.na.(hw1_data))
any(is.na(hw1_data))
nrow(hw1_data[complete.cases(hw1_data),])
nrow(hw1_data[complete.cases(hw1_data[,"Ozone"]),])
nrow(hw1_data[na.cases(hw1_data[,"Ozone"]),])
nrow(hw1_data[missing.cases(hw1_data[,"Ozone"]),])
any(is.na(hw1_data))
any(is.na(hw1_data$Ozone))
mean(na.omit(hw1_data$Ozone))
subset <- subset(hw1_data, "Ozone" >= 31 && "Temp" >= 90, select=c("Ozone', "Temp"))
subset <- subset(hw1_data, Ozone >= 31 & Temp >= 90, select=c(Ozone, "Temp))
l
;s
ls
~
subset(hw1_data, Ozone >= 31 & Temp >= 90, select=c(Ozone, Temp))
subset(hw1_data, Ozone >= 31 & Temp >= 90, select=c(Ozone, Temp, Solar.R))
mean(Solar.R)
mean(hw1_data, hw1_data$Solar.R)
mean(subset(hw1_data, Ozone >= 31 & Temp >= 90, select=c(Ozone, Temp, Solar.R), Solar.R)
mean
mean()
mean(subset(hw1_data, Ozone >= 31 & Temp >= 90, select=c(Ozone, Temp, Solar.R), Solar.R)
mean(subset(hw1_data, Ozone >= 31 & Temp >= 90, select=c(Ozone, Temp, Solar.R), Solar.R)
mean(subset(hw1_data, Ozone >= 31 & Temp >= 90, select=c(Ozone, Temp, Solar.R))
subset(hw1_data, Ozone >= 31 & Temp >= 90, select=c(Ozone, Temp, Solar.R))
aggregate(Solar.R, data=subset(hw1_data, Ozone >= 31 & Temp >= 90, mean)
1
mean(subset(hw1_data, Ozone >= 31 & Temp >= 90, select=c(Ozone, Temp, Solar.R), Solar.R)
1
subset(hw1_data, Ozone >= 31 & Temp >= 90, select=c(Ozone, Temp, Solar.R))
y <- subset(hw1_data, Ozone >= 31 & Temp >= 90, select=c(Ozone, Temp, Solar.R))
z <- mean(y, Solar.R)
mean(y$Solar.R)\
mean(y$Solar.R)
y <- subset(hw1_data, Ozone > 31 & Temp > 90, select=c(Ozone, Temp, Solar.R))
z <- subset(hw1_data, Ozone > 31 & Temp > 90, select=c(Ozone, Temp, Solar.R))
mean(z$Solar.R)
c <- subset(hw1_data, Month = 6, select=c(Temp))
mean(c)
mean(c$Temp)
c <- subset(hw1_data, Month == 6, select=c(Temp))
mean(c$Temp)
c <- subset(hw1_data, Month == 5, select=c(Ozone))
max(c$Ozone)
max(c$Ozone, na.rm = TRUE)
swirl::swirl()
library(swirl)
ls()
rm(list=ls())
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9. 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqr <- sqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+100
z*2+1000
my_div
getwd()
ls
ls()
x <- 9
ls()
dir()
?list.files
args()
args(list.files())
args(list.files)
"old.dir"<- args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.r")
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R)
file.rename("mytest.R","mytest2.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path('folder1','folder2')
?dir.create
dir.create("testdir2", file.path("testdir2"))
dir.create(file.path('testdir2', 'testdir3'))
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
`:`
?`"`
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,lenght=10)
my_seq<-seq(5,10,lenght=10)
my_seq<-seq(5,10,lenght=30)
my_seq <- seq(5,10,lenght=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2), each=10)
num_vect<- c(0.5,55,-10,6)
tf<num_vect<1
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse = "")
paste(my_char,collapse = " ")
my_name<-c(my_char, "Jesus")
my_name
paste(my_name,collapse = " ")
paste("Hello", "world!",sep=" ")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS,1:3,sep="-")
paste(LETTERS,1:4,sep="-")
swirl()
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse = "")
paste(my_char,collapse = " ")
my_name<-c(my_char, "Jesus")
my_name
paste(my_name,collapse = " ")
paste("Hello", "world!",sep=" ")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS,1:4,sep="-")
library(swirl)
swirl()
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
swirl()
swirl()
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
Y[y>0]
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
c([3,5,7])
c(3,5,7)
z<-[c(3,5,7)]
info()
nxt()
subset(x, [c(3,5,7)])
info()
nxt()
j
c(3,5,7)
[x]c(3,5,7)
[[x]]c(3,5,7)
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf =
| NA)
vect <- c(foo = 11, bar = 2, norf =NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect, vect2)
vect[2]
vect["bar"]
vect[c("foo", "bar")]
my_vector<-1:20
my_vector
dim(my_vector)
lengthmy_vector
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes()
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<my_vector
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(data=1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <-data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
bye()
getwd()
q()
x <-4L
class(x)
y <- c(4,TRUE)
class(y)
z <- c(1,3,5)
m <- c(3,2,10)
cbind(z,m)
x <- 1:4
y <- 2
x+y
z <- 4L\
z <- 4L\
z <- 4L
class(z)
z <- 10
f(3)
getwd()
cd "home/gsu/Documents"
cd home/gsu/Documents
x <- 4L
class(x)
y <- c(4, TRUE)
class(y)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x,y)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
best <- function(state, outcome) {
data <- read.csv("outcome-of-care-measures.csv")
outcomes <- c('heart attack', 'heart failure', 'pneumonia')
indices <- c(11, 17, 23)
if (!state %in% data$State) stop("invalid state")
if (!outcome %in% outcomes) stop("invalid outcome")
i <- indices[match(outcome, outcomes)]
hospitals <- data[data$State == state, c(2, i)]
hospitals[, 2] <- as.numeric(as.character(hospitals[, 2]))
hospitals <- na.omit(hospitals)
names(hospitals) <- c("name", "deaths")
min_deaths <- min(hospitals$deaths)
candidates <- hospitals[hospitals$deaths == min_deaths, ]$name
return(as.character(sort(candidates)[1]))
}
best("MD", "heart attack")
setwd("~/Documents/ProAss3")
best <- function(state, outcome) {
data <- read.csv("outcome-of-care-measures.csv")
outcomes <- c('heart attack', 'heart failure', 'pneumonia')
indices <- c(11, 17, 23)
if (!state %in% data$State) stop("invalid state")
if (!outcome %in% outcomes) stop("invalid outcome")
i <- indices[match(outcome, outcomes)]
hospitals <- data[data$State == state, c(2, i)]
hospitals[, 2] <- as.numeric(as.character(hospitals[, 2]))
hospitals <- na.omit(hospitals)
names(hospitals) <- c("name", "deaths")
min_deaths <- min(hospitals$deaths)
candidates <- hospitals[hospitals$deaths == min_deaths, ]$name
return(as.character(sort(candidates)[1]))
}
best("MD", "heart attack")
best("MD", "heart attack")
best("MD", "heart attack")
best("MD", "pneumonia")
best("TX", "heart attack")
best("TX", "heart attack")
best <- function(state, outcome) {
#Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
outcomes <- c('heart attack', 'heart failure', 'pneumonia')
columns <- c(11, 17, 23)
#Check that state and outcome are valid
if (!state %in% data$State) stop("invalid state")
if (!outcome %in% outcomes) stop("invalid outcome")
#Return hospital name in that state with lowest 30-day
#death rate
j <- columns [match(outcome, outcomes)]
hospitals <- data[data$State == state, c(2, j)]
hospitals[, 2] <- as.numeric(as.character(hospitals[, 2]))
hospitals <- na.omit(hospitals)
names(hospitals) <- c("name", "deaths")
min_deaths <- min(hospitals$deaths)
candidates <- hospitals[hospitals$deaths == min_deaths, ]$name
return(as.character(sort(candidates)[1]))
}
best("TX", "heart failure")
colnames(data())
colnames(data())
colnames("data")
colnames("outcome-of-care-measures.csv")
best <- function(state, outcome) {
#Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
outcomes <- c('heart attack', 'heart failure', 'pneumonia')
columns <- c(11, 17, 23)
#Check that state and outcome are valid
if (!state %in% data$State) stop("invalid state")
if (!outcome %in% outcomes) stop("invalid outcome")
#Return hospital name in that state with lowest 30-day
#death rate
j <- columns [match(outcome, outcomes)]
hospitals <- data[data$State == state, c(2, j)]
hospitals[, 2] <- as.numeric(as.character(hospitals[, 2]))
hospitals <- na.omit(hospitals)
names(hospitals) <- c("name", "deaths")
min_deaths <- min(hospitals$deaths)
candidates <- hospitals[hospitals$deaths == min_deaths, ]$name
return(as.character(sort(candidates)[1]))
}
colnames(data)
colnames("data")
colnames("outcome")
colnames(outcome)
col("outcome")
col(best)
ls
data <- read.csv("outcome-of-care-measures.csv")
colnames(data)
